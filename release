#!/usr/bin/env bash
# 
# Release from develop branch to master.

set -e

YELLOW="\033[1m\033[93m"
CLEAR="\033[0m"

# Print help and exit
print_help_and_exit() {
   	echo "release [version] [message]"
   	echo "version The release version (date in ISO format if '-d')"
   	echo "message The release message (default to 'Release <version>')"
   	echo "If no version nor message are passed on command line, they"
   	echo "are extracted from semantic changelog"
   	exit 0
}

# Read version and commit message
# - version
# - message
read_version_and_message() {
	echo -e "${YELLOW}Reading version and message${CLEAR}"
	local version=$1
	local message=$2
	if [ "${version}" = "-d" ]
	then
    	version="`date -I`"
	fi
	if [ -z "${version}" ]
	then
    	changelog release date check
    	version="`changelog release version`"
    	message="`changelog release summary`"
	fi
	if [ -z "${message}" ]
	then
    	message="Release ${version}"
	else
    	message="Release ${version}: ${message}"
	fi
	VERSION=${version}
	MESSAGE=${message}
	echo "Releasing version '${VERSION}' with message '${MESSAGE}'"
}

# Check that are no uncommitted changes
check_uncommitted() {
	echo -e "${YELLOW}Checking uncommitted changes${CLEAR}"
	if ! git diff --quiet --exit-code HEAD
	then
    	echo "There are uncommitted changes"
		exit 1
	fi
}

# Check that we are on develop branch
check_on_develop() {
	echo -e "${YELLOW}Check that we are on develop${CLEAR}"
	if [ `git rev-parse --abbrev-ref HEAD` != "develop" ]; then
    	echo "You must be on branch develop"
    	exit 1
	fi
}

# Merge develop branch on master, tag release and return on develop
merge_and_tag() {
	echo -e "${YELLOW}Merging branch develop on master and tagging release${CLEAR}"
	git checkout master
	git pull
	git merge --no-ff develop -m "${MESSAGE}"
	git push
	git tag -a "${VERSION}" -m "${MESSAGE}"
	git push origin "${VERSION}"
	git checkout develop
}

if [ "$1" = "-h" ]
then
	print_help_and_exit
fi
read_version_and_message $1 $2
check_uncommitted
check_on_develop
merge_and_tag

